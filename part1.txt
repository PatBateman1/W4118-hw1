Part 1(a)
=========

1.  What actions does a kernel perform to context switch between processes?

/* TODO */
The kernel will save the general purpose registers, PC, and the kernel stack pointer 
of the currently-excecuting process and restore the registers, PC, and switch to the
kernel stack for the soon-to-be-excuting process.



2.  What process state does a process enter immediately after it terminates?
    What is this state for, and when does it leave this state?

/* TODO */
The process enters the zombie state inmmediately after it terminates.
Zombie state states for the state where a process has exited but has not yet
been cleaned up.
The process leaves zombie state when the OS cleans up all relevant data structures 
of the process.


Part 1(b)
=========

3.  What is typeof? Is it a C language keyword, function, or macro? What does
    it do?

/* TODO */
typeof is a C language keyword, it refers to the type of an expression.

4.  What is offsetof? Is it a keyword, function, or macro? What does it do?

/* TODO */
offsetof is a macro, it computes the offset in bytes, from the beginning of an object
of specified type to its specified member.

5.  What does the container_of() macro do?

/* TODO */
container_of() macro refers the beginning address of a object given the specified
member's pointer of this object.

6.  The container_of() macro, in the way itâ€™s currently written, is not
    portable across C compilers because it uses GNU-specific language
    extensions. Can you identify what they are?

/* TODO */
Because it uses the typeof keyword which is a gnu extension 
and it uses braced-group within expression which is a gnu extension;

7.  The container_of() macro has two lines. Is the 1st line (the declaration of
    __mptr) really necessary? Is it possible to rewrite the macro without it?
    What is the purpose of that 1st line?

/* TODO */
it is necessary since it finds out the type of of the specified member of the object;
We may rewrite the macro that pass the type in like container_of(ptr, type, member, mem_type) .